apply plugin: 'com.android.application'apply plugin: 'com.google.gms.google-services'apply plugin: 'com.google.firebase.crashlytics'android {    //the compression of webp file during build causes problem with FileDescriptor in ContentProvider.    aaptOptions {        noCompress "webp"    }    compileSdkVersion 29    defaultConfig {        applicationId "com.stickersbyus.freshanduniquestickersforwhatsapp"        minSdkVersion 16        targetSdkVersion 29        multiDexEnabled true        versionCode 7        versionName "1.5"        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"        def contentProviderAuthority = applicationId + ".stickercontentprovider"        // Creates a placeholder property to use in the manifest.        manifestPlaceholders =                [contentProviderAuthority: contentProviderAuthority]        // Adds a new field for the authority to the BuildConfig class.        buildConfigField("String",                "CONTENT_PROVIDER_AUTHORITY",                "\"${contentProviderAuthority}\"")    }    buildTypes {        debug {            minifyEnabled false            shrinkResources false            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'        }        release {            minifyEnabled true            shrinkResources true            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'            multiDexEnabled true        }    }    compileOptions {        sourceCompatibility = '1.8'        targetCompatibility = '1.8'    }    packagingOptions {        exclude 'lib/*/libnative-imagetranscoder.so'        exclude 'lib/*/libnative-filters.so'    }//    splits {//        abi {//            enable true // Enables building multiple APKs per ABI.//            universalApk true // Specifies that we want to also generate a universal APK that includes all ABIs.//        }//    }}task checkDebug {    doLast {        println("checkDebug")        if (android.defaultConfig.applicationId.startsWith("com.whatsapp")) {            throw new GradleException("applicationId in defaultConfig cannot start with com.whatsapp, please change your applicationId in app/build.gradle")        }        checkApplicationIdInDebug()    }}private void checkApplicationIdInDebug() {    Properties properties = new Properties()    properties.load(project.rootProject.file('local.properties').newDataInputStream())    def ignoreApplicationIdCheck = properties.getProperty('ignoreApplicationIdCheck')    if (ignoreApplicationIdCheck == null) {        if (android.defaultConfig.applicationId == "com.testing.app") {            throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")        }    } else {        println("application id check ignored")    }}task checkRelease {    doLast {        println("checkRelease")        if (android.defaultConfig.applicationId.startsWith("com.example")) {            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")        }    }}tasks.whenTaskAdded { task ->    println(task.name)    if (task.name.contains("assembleDebug")) {        task.dependsOn checkDebug    }    if (task.name.contains("assembleRelease")) {        task.dependsOn checkRelease    }}dependencies {    implementation fileTree(include: ['*.jar'], dir: 'libs')    implementation 'androidx.appcompat:appcompat:1.1.0'    implementation 'com.google.android.material:material:1.1.0'    //noinspection GradleCompatible    implementation 'com.android.support:appcompat-v7:28.0.0'    //noinspection GradleCompatible    implementation 'com.android.support:design:28.0.0'    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'    implementation 'android.arch.navigation:navigation-fragment:1.0.0'    implementation 'android.arch.navigation:navigation-ui:1.0.0'    testImplementation 'junit:junit:4.13'    androidTestImplementation 'androidx.test:runner:1.2.0'    implementation 'eu.dkaratzas:android-inapp-update:1.0.5'    implementation 'com.google.android.gms:play-services-ads:19.3.0'    implementation 'com.google.firebase:firebase-analytics:17.2.2'    implementation 'com.google.firebase:firebase-messaging:20.2.4'    implementation 'com.google.firebase:firebase-analytics:17.4.4'    implementation 'com.google.firebase:firebase-crashlytics:17.1.1'    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'    implementation 'androidx.recyclerview:recyclerview:1.1.0'    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'    def fresco_version = '2.2.0'    implementation "com.facebook.fresco:fresco:$fresco_version"    implementation "com.facebook.fresco:webpsupport:$fresco_version"    implementation "com.facebook.fresco:animated-webp:$fresco_version"    implementation "com.facebook.fresco:animated-base:$fresco_version"}